@import 'functions';

$breakpoints: () !default;
$typi: (null: (16px, 1.5)) !default;

@mixin typi (
  $target-map,
  $breakpoints: $breakpoints,
  $typi: $typi, 
  $base: false
) {
  @each $breakpoint, $bp-val in $target-map {

    @if $breakpoint == null {
      @include _ty-write-props($target-map, $breakpoint, $typi, $base)
    }

    // Write media query
    @else if map-has-key($breakpoints, $breakpoint) {
      $min-width: map-get($breakpoints, $breakpoint);
    
      @media screen and (min-width: #{$min-width}) {
        @include _ty-write-props($target-map, $breakpoint, $typi, $base);
      }
    }

    @else {
      // Throws sass error
      @error $breakpoint not found in $breakpoints;
    }
  }
}

@mixin typi-base(
  $typi: $typi,
  $breakpoints: $breakpoints
) {
  @include typi($typi, $breakpoints, $typi, true);
}

// _ty-write-props
// ===============
// Writes font-size (and line height) properties
@mixin _ty-write-props (
  $target-map,
  $breakpoint, 
  $typi,
  $base
) {
  $bp-val: map-get($target-map, $breakpoint);
  $font-size: null;
  $line-height: null;

  @if type-of($bp-val) == "list" and length($bp-val) > 1 {
    $font-size: nth($bp-val, 1);
    $line-height: nth($bp-val, 2);
    font-size: _ty-font-size($font-size, $breakpoint, $typi, $base);
    line-height: $line-height;
  }
  @else {
    $font-size: $bp-val;
    font-size: _ty-font-size($font-size, $breakpoint, $typi, $base);
  }
}