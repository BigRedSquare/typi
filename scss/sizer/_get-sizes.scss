// Calculates font size to return to typi
// ----------
// - return font-size in rem or em
// ==========
@function _ty-calc-font-size2 (
  $font-size: $font-size,
  $basemap: $basemap,
  $rem: $rem,
  $breakpoint: null
) {

  // Using typi-ms if font-size is unitless
  @if unitless($font-size) {
    $step: $font-size;
    @if $rem {
      @return _ty-ms-to-rem($step, $breakpoint);
    } @else {
      @return _ty-ms-to-em($step, $breakpoint);
    }
  }

  $base-null: null;
  $base-font-size: null;

  // Calculation uses base-null becase everything
  // is relative to the base font-size.
  @if map-has-key($basemap, null) {
    $base-null: map-get($basemap, null);
    $base-font-size: nth($base-null, 1);
  } @else {
    @error 'Base map must have null key'
  }


  // Converts to rem
  @if $rem {
    @if unit($font-size) == 'px' {
      @return _ty-to-rem($font-size, $base-font-size);
    } @else {
      @return _ty-to-rem($font-size);
    }
  }

  // Converts to em
  @else {
    @if unit($font-size) == 'px' {
      @return _ty-to-em($font-size, $base-font-size);
    } @else {
      @return _ty-to-em($font-size);
    }
  }
}

// _ty-calc-ms
// ==========
@function _ty-calc-ms(
  $step,
  $breakpoint: null,
  $typi-ms: $typi-ms
) {
  $ms-setting: null;
  $ty-ms-base: ();
  $ty-ms-ratio: ();

  @if map-has-key($typi-ms, $breakpoint) {
    $ms-setting: map-get($typi-ms, $breakpoint);
  } @else {
    @error "$typi-ms does not contain #{$breakpoint}";
  }

  @if length($ms-setting) == 0 {
    @error "$typi-ms at #{$breakpoint} must not be empty";
  }

  // Only ratio if length == 1
  @if length($ms-setting) == 1 {
    $_is-ratio: _ty-is-ratio($ms-setting);

    @if $_is-ratio {
      @return ms($step, 1em, $ms-setting);
    } @else {
      @error "$typi-ms ratio at #{$breakpoint} must be unitless";
    }
  }

  // Two or more values.
  // All values with em units are font-sizes.
  // All unitless values are ratios.
  @else {
    @for $i from 1 through length($ms-setting) {
      $_current: nth($ms-setting, $i);
      $_is-base: _ty-is-base($_current);
      $_is-ratio: _ty-is-ratio($_current);

      @if $_is-base {
        $ty-ms-base: _ty-append($ty-ms-base, $_current)
      }

      @if $_is-ratio {
        $ty-ms-ratio: _ty-append($ty-ms-ratio, $_current)
      }
    }

    // Sets base to 1em if there's no base
    @if length($ty-ms-base) == 0 {
      $ty-ms-base: 1em;
    }

    @if length($ty-ms-ratio) == 0 {
      @error "$typi-ms at #{$breakpoint} must contain at least one ratio";
    }

    @return ms($step, $ty-ms-base, $ty-ms-ratio);
  }
}

// Checks if $num is base for ms calc
// ==========
@function _ty-is-base($num) {
  @if unit($num) == 'em' {
    @return true;
  } @else if unitless($num) {
    @return false;
  } @else {
    @error '$typi-ms only accepts em base values';
  }
}

// Checks if $num is ratio for ms calc
// ==========
@function _ty-is-ratio($num) {
  @if unitless($num) {
    @return true;
  } @else {
    @return false;
  }
}
