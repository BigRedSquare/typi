// _ty-font-size
// =============
// Calls _ty-calc-font-size or _ty-base-size
@function _ty-font-size(
  $font-size,
  $breakpoint,
  $typi,
  $rem,
  $base: false,
  $typi-map: false
) {
  @if $base == true {
    @return _ty-to-percentage($font-size);
  } @else {
    @return _ty-calc-font-size($font-size, $breakpoint, $typi, $rem, $typi-map);
  }
}

// Calculates font size to return to typi
// ----------
// - return font-size in rem or em
// ==========
@function _ty-calc-font-size2 (
  $font-size: $font-size,
  $basemap: $basemap,
  $rem: $rem
) {
  @if not(map-has-key($basemap, null)) {
    @error 'Base map must have null key'
  }

  // Uses null map, because everything is relative to the base font-size.
  // At different brekapoints, pixel value written in maps
  // is still relative to base font size
  $base-null: map-get($basemap, null);
  $base-font-size: nth($base-null, 1);

  // Converts to rem
  @if $rem {
    @if unit($font-size) == 'px' {
      @return _ty-to-rem($font-size, $base-font-size);
    } @else {
      @return _ty-to-rem($font-size);
    }
  }

  // Converts to em
  @else {
    @if unit($font-size) == 'px' {
      @return _ty-to-em($font-size, $base-font-size);
    } @else {
      @return _ty-to-em($font-size);
    }
  }
}

// _ty-calc-font-size
// =======
// returns correct rem value depending on breakpoint
@function _ty-calc-font-size(
  $font-size,
  $breakpoint,
  $typi,
  $rem,
  $basemap: $basemap,
  $typi-map: false
) {
  // Use typi-ms if font-size is unitless
  // Normal conversion otherwise
  @if unitless($font-size) {
    @if function-exists(ms) {
      $typi-ms: map-get($typi-map, ms);
      @if $rem {
        @return _ty-to-rem(_ty-ms($font-size, $breakpoint, $typi-ms, $typi-map));
      } @else {
        @return _ty-ms($font-size, $breakpoint, $typi-ms, $typi-map);
      }
    } @else {
      @error "Modular Scale Library required";
    }
  }

  // Convert px and em into rem
  @else if $rem {
    @if unit($font-size) == 'em' {
      @return _ty-to-rem($font-size);
    }

    @else if unit($font-size) == 'px' {
      $basemap: map-get($typi, null);
      $basefont: if(type-of($basemap) == 'list', nth($basemap, 1), $basemap);
      @debug $basefont;

      @if $basefont == null {
        $basefont: nth(map-get($typi, null), 1);
      }

      // @return 1;
      @return _ty-to-rem($font-size, $basefont);
    }

    @else {
      @return $font-size;
    }
  }

  // Converts rem and px into em
  @else {
    @if unit($font-size) == 'rem' {
      @return _ty-to-em($font-size);
    }

    @else if unit($font-size) == 'px' {
      $basemap: map-get($typi, $breakpoint);
      $basefont: if(type-of($basemap) == 'list', nth($basemap, 1), $basemap);

      @if $basefont == null {
        $basefont: nth(map-get($typi, null), 1);
      }

      @return _ty-to-em($font-size, $basefont);
    }

    @else {
      @return $font-size;
    }
  }
}

// _ty-ms
// ======
@function _ty-ms(
  $multiplier,
  $breakpoint: null,
  $typi-ms: $typi-ms,
  $typi-map: false
) {
  $ms-setting: null;

  @if map-has-key($typi-ms, $breakpoint) {
    $ms-setting: map-get($typi-ms, $breakpoint);
  }

  @else {
    $last-valid-ms: map-get($typi-map, last-valid-ms);
    $ms-setting: map-get($typi-ms, $last-valid-ms);
  }

  $ty-ms-base: null;
  $ty-ms-ratio: null;

  @for $i from 1 to length($ms-setting) + 1 {
    $val: nth($ms-setting, $i);
    // For combinations of multiple bases + multiple ratios
    @if type-of($val) == 'list' {
      @if not unitless(nth($val, 1)) {
        $ty-ms-base: $val;
      } @else {
        $ty-ms-ratio: $val;
      }
    }
    // For combinations of 1 base + multiple ratios
    @else {
      @if unitless($val) {
        @if $ty-ms-ratio == null {
          $ty-ms-ratio: $val;
        } @else if type-of($ty-ms-ratio) == "number" {
          $ty-ms-ratio: $ty-ms-ratio $val;
        } @else if type-of($ty-ms-ratio) == "list" {
          $ty-ms-ratio: append($ty-ms-ratio, $val);
        }
      }

      @else {
        @if $ty-ms-base == null {
          $ty-ms-base: $val;
        } @else if type-of($ty-ms-base) == 'number' {
          $ty-ms-base: ($ty-ms-base $val)
        } @else if type-of($ty-ms-base) == 'list' {
          $ty-ms-base: append($ty-ms-base, $val);
        }
      }
    }
  }

  @if $ty-ms-base == null {
    $ty-ms-base: 1em;
  }

  @return ms($multiplier, $ty-ms-base, $ty-ms-ratio);
}

@function typi-ms-size($multipler, $ms-key, $typi-ms: $typi-ms) {
  $ms-list: map-get($typi-ms, $ms-key);
  // @return ms()
}