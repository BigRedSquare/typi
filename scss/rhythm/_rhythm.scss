@function vr-2(
  $vr,
  $current-font-size: null,
  $basemap: map-get($typi, base)
) {
  $base-font-size: _ty-get-base-font-size-2($basemap);
  $base-line-height: _ty-get-base-line-height-2($basemap);
  $rhythm: $vr * $base-line-height;

  // Returns rem values
  @if not $current-font-size {
    @return _ty-to-rem($rhythm * 1em);
    @return 1;
  }

  // return em values
  @if unit($current-font-size) == 'px' {
    $rhythm-px: $rhythm * $base-font-size;
    @return _ty-to-em($rhythm-px, $current-font-size);
  }
  @else if unit($current-font-size) == 'em' {
    @return _ty-to-em($rhythm * 1em, $current-font-size);
  }
  @else {
    @error "vr() only accepts px or em units";
  }
}

// Responsive Vertical Rhythm
// @mixin rvr($props, $vr, $typi: $typi) {
//   $base-font: _ty-get-base-font($typi);
//   $base-line-height: _ty-get-base-line-height($typi);
//   $unit: unit($base-line-height);

//   @each $prop in $props {
//     @if $unit == 'px' {
//       #{$prop}: $base-line-height / $base-font * 1rem * $vr;
//     } @else {
//       #{$prop}: $base-line-height * 1rem * $vr;
//     }
//     #{$prop}: calc(var(--baseline) * #{1rem * $vr});
//   }
// }
// @mixin ms-vr()


// vr-2
// ----------
// Font-size changes at different breakpoints when ratio changes.
// When font-size changes, em values of vr must change.
// Must recalculate current font-size first, since font-size calculated with typi multiplier
@mixin ms-vr-2(
  $properties,
  $vr,
  $target,
  $typi: $typi,
  $typi-ms: $typi-ms,
  $breakpoints: $breakpoints
) {
  @include _ty-write-breakpoints-2((
    target: $target,
    typi: $typi,
    typi-ms: $typi-ms,
    breakpoints: $breakpoints,
    rem: true,
    output: 'vr',
    properties: $properties,
    vr: $vr
  ))
}
