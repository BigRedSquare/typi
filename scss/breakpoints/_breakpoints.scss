// _ty-get-breakpoints
// ===================
@function _ty-get-breakpoints($breakpoints, $typi-ms, $target) {
  $_return: null;

  @each $breakpoint, $val in $breakpoints {
    @if type-of($typi-ms) == 'map' and map-has-key($typi-ms, $breakpoint) {
      @if not index($_return, $breakpoint) {
        $_return: append($_return, $breakpoint);
      }
    }

    @if map-has-key($target, $breakpoint) {
      @if not index($_return, $breakpoint) {
        $_return: append($_return, $breakpoint);
      }
    }
  }
  @return $_return;
}

// _ty-write-breakpoints
// ==============
// Allows use of breakpoint-sass and mappy-bp.
// Falls back to default method otherwise.
@mixin _ty-write-breakpoints(
  $typi-map
) {
  $breakpoint: map-get($typi-map, breakpoint);
  $breakpoints: map-get($typi-map, breakpoints);
  $bp-val: map-get($breakpoints, $breakpoint);

  @if $typi-breakpoint == breakpoint {
    @if mixin-exists(breakpoint) {
      @include breakpoint-set('to ems', true);
      @include breakpoint(map-get($breakpoints, $breakpoint)) {
        @include _ty-write-props($typi-map);
      }
    } @else {
      @error 'Breakpoint-sass Library not found'
    }
  }

  @else if $typi-breakpoint == mappy-breakpoint or $typi-breakpoint == mappy-breakpoints {
    @if mixin-exists(mappy-bp) {
      @include mappy-bp(map-get($breakpoints, $breakpoint)) {
        @include _ty-write-props($typi-map);
      }
    } @else {
      @error 'Mappy Breakpoints Library not found'
    }
  }

  @else {
    @media all and (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @include _ty-write-props($typi-map);
    }
  }
}
