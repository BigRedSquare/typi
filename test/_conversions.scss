
$typi: (
  null: (16px, 1.5),
  small: 18px,
  med: 18px,
  large: (20px, 1.6)
);

@include test-module('Rem Conversion') {
  @include test('em to rem') {
    $test: _ty-calc-font-size(2em, small, $typi, true);
    @include assert-equal($test, 2rem, 'em should be converted into rem');
  }

  @include test('px to rem') {
    $test: _ty-calc-font-size(20px, null, $typi, true);
    $result: 20px / 16px * 1rem;
    @include assert-equal($test, $result, 'px should be converted into rem');
  }

  @include test('px to rem (with Breakpoint)') {
    $test: _ty-calc-font-size(20px, small, $typi, true);
    $result: 20px / 18px * 1rem;
    @include assert-equal($test, $result, 'px should be converted into rem (when given a breakpoint)');
  }

  @include test('other units') {
    $test: _ty-calc-font-size(4vw, null, $typi, true);
    @include assert-equal($test, 4vw, 'other units should remain as their original unit')
  }
}


@include test-module('EM Conversion') {
  @include test('rem to em') {
    $test: _ty-calc-font-size(2rem, small, $typi, false);
    @include assert-equal($test, 2em, 'rem should be converted into em');
  }

  @include test('px to em') {
    $test: _ty-calc-font-size(20px, null, $typi, false);
    $result: 20px / 16px * 1em;
    @include assert-equal($test, $result, 'px should be converted into em');
  }

  @include test('px to em (with Breakpoint)') {
    $test: _ty-calc-font-size(20px, small, $typi, false);
    $result: 20px / 18px * 1em;
    @include assert-equal($test, $result, 'px should be converted into em (when given a breakpoint)');
  }

  @include test('other units') {
    $test: _ty-calc-font-size(4vw, null, $typi, false);
    @include assert-equal($test, 4vw, 'other units should remain as their original unit')
  }
}