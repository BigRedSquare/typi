@import 'true';
@import '../scss/typi';

$breakpoints: (
  small: 400px, 
  medium: 800px, 
  large: 1200px
);

$typi: (
  null: (16px, 1.5), 
  small: 18px, 
  large: (20px, 1.6)
);

$h1: (
  null: (2em, 1.2), 
  small: (3em, 1.3), 
  large: 44px
);

// Rem function should always get REM unit from the current font size.

@include test-module('Rem Conversion') {
  @include test('em to rem') {
    $test: _ty-rem(2em, small, $typi);
    @include assert-equal($test, 2rem, 'em should be converted straight into rem');
  }

  @include test('px to rem') {
    $test: _ty-rem(20px, null, $typi);
    $result: 20px / 16px * 1rem;

    @include assert-equal($test, $result);
  }

  @include test('px to rem (with Breakpoint)') {
    $test: _ty-rem(20px, small, $typi);
    $result: 20px / 18px * 1rem;

    @include assert-equal($test, $result);
  }
}

@include test-module('Write Properites for one breakpoint:') {
  @include test('Writes font-size only') {
    @include assert('') {
      $target-size: map-get($h1, large);
      $test-font-size: _ty-rem($target-size, large, $typi);

      @include input {
        @include _ty-write-props($h1, large, $typi, false);
      }

      @include expect {
        font-size: $test-font-size;
      }
    }
  }

  @include test('Writes font-size and line-height') {
    @include assert('') {
      @include input {
        @include _ty-write-props($h1, null, $typi, false);
      }

      @include expect {
        font-size: 2rem;
        line-height: 1.2;
      }
    }
  }
}

@include test-module('Typi Base Font Conversion') {
  @include test('px to %') {
    $test: _ty-base-size(20px, null, $typi);
    $result: 125%;
    @include assert-equal($test, $result, 'Pixels are converted into percentages with 16px as base');
  }
}

@include report;


